version: '3.8'

# ===============================================
# MOTIONTRACKER - DOCKER COMPOSE PRODU√á√ÉO
# ===============================================

services:
  # ===============================================
  # üî¥ REDIS CACHE & QUEUE
  # ===============================================
  redis:
    image: redis:7-alpine
    container_name: motiontracker_redis
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
      - ./redis.conf:/usr/local/etc/redis/redis.conf
    command: redis-server /usr/local/etc/redis/redis.conf
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - motiontracker

  # ===============================================
  # üöÄ BACKEND API (NestJS) - CONECTA AO SUPABASE CLOUD
  # ===============================================
  backend:
    build:
      context: .
      dockerfile: Dockerfile
      target: runner
    container_name: motiontracker_backend
    env_file:
      - ./.env
    environment:
      - NODE_ENV=production
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=redis://redis:6379
      - REDIS_HOST=redis
      - PORT=3001
      - JWT_SECRET=${JWT_SECRET}
      - SUPABASE_URL=${SUPABASE_URL}
      - SUPABASE_ANON_KEY=${SUPABASE_ANON_KEY}
      - SUPABASE_SERVICE_ROLE_KEY=${SUPABASE_SERVICE_ROLE_KEY}
      - FACEBOOK_APP_ID=${FACEBOOK_APP_ID}
      - FACEBOOK_APP_SECRET=${FACEBOOK_APP_SECRET}
      - FACEBOOK_PIXEL_ID=${FACEBOOK_PIXEL_ID}
      - FACEBOOK_ACCESS_TOKEN=${FACEBOOK_ACCESS_TOKEN}
      - GOOGLE_CLIENT_ID=${GOOGLE_CLIENT_ID}
      - GOOGLE_CLIENT_SECRET=${GOOGLE_CLIENT_SECRET}
      - GA4_MEASUREMENT_ID=${GA4_MEASUREMENT_ID}
      - GA4_API_SECRET=${GA4_API_SECRET}
      - GTM_ENDPOINT=${GTM_ENDPOINT}
      - GTM_API_KEY=${GTM_API_KEY}
      - FRONTEND_URL=${FRONTEND_URL}
      - CORS_ORIGINS=${CORS_ORIGINS}
    ports:
      - "3001:3001"
    volumes:
      - ./logs:/app/logs
      - ./uploads:/app/uploads
    depends_on:
      redis:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    networks:
      - motiontracker

  # ===============================================
  # üé® FRONTEND (Next.js)
  # ===============================================
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.production
    container_name: motiontracker_frontend
    env_file:
      - ./.env
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL}
      - NEXT_PUBLIC_BACKEND_URL=http://backend:3001
      - PORT=3000
    ports:
      - "3000:3000"
    depends_on:
      - backend
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - motiontracker

  # ===============================================
  # üåê NGINX REVERSE PROXY
  # ===============================================
  nginx:
    image: nginx:alpine
    container_name: motiontracker_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/sites-available/motiontracker:/etc/nginx/conf.d/default.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
      - /etc/letsencrypt:/etc/letsencrypt:ro
      - /var/www/certbot:/var/www/certbot:ro
    depends_on:
      - frontend
      - backend
    restart: unless-stopped
    networks:
      - motiontracker

  # ===============================================
  # üìä QUEUE MONITORING (Bull Dashboard)
  # ===============================================
  queue-dashboard:
    image: deadly0/bull-board
    container_name: motiontracker_queue_dashboard
    environment:
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD:-}
      - REDIS_DB=${REDIS_DB:-0}
    ports:
      - "3002:3000"
    depends_on:
      redis:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - motiontracker

  # ===============================================
  # üìà MONITORING & METRICS
  # ===============================================
  prometheus:
    image: prom/prometheus:latest
    container_name: motiontracker_prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    networks:
      - motiontracker

  grafana:
    image: grafana/grafana:latest
    container_name: motiontracker_grafana
    ports:
      - "3003:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
    depends_on:
      - prometheus
    restart: unless-stopped
    networks:
      - motiontracker

# ===============================================
# üìÅ VOLUMES
# ===============================================
volumes:
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

# ===============================================
# üåê NETWORKS
# ===============================================
networks:
  motiontracker:
    driver: bridge